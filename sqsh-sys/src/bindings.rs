/* automatically generated by rust-bindgen 0.66.1 */

use libc::{FILE, mode_t, time_t};

pub type sqsh_index_t = usize;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshInodeMap {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshIdTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshExportTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshXattrTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshFragmentTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshTrailingContext {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SqshSuperblockCompressionId(pub ::std::os::raw::c_uint);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SqshSuperblockFlags(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshSuperblock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshConfig {
    pub archive_offset: u64,
    pub source_size: u64,
    pub source_mapper: *mut SqshMemoryMapperImpl,
    pub mapper_block_size: ::std::os::raw::c_int,
    pub mapper_lru_size: ::std::os::raw::c_int,
    pub compression_lru_size: ::std::os::raw::c_int,
    pub max_symlink_depth: usize,
    pub _reserved: [::std::os::raw::c_char; 128usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshArchive {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshMapManager {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SqshGzipStrategies(pub ::std::os::raw::c_uint);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SqshXzFilters(pub ::std::os::raw::c_uint);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SqshLz4Flags(pub ::std::os::raw::c_uint);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SqshLzoAlgorithm(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshCompressionOptions {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshFile {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshFileReader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshFileIterator {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SqshFileType(pub ::std::os::raw::c_int);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshDirectoryIterator {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SqshError(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshTreeWalker {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SqshXattrType(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshXattrIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqshMemoryMapperImpl {
    pub _address: u8,
}
pub const SQSH_INODE_NO_FRAGMENT: u32 = 4294967295;
pub const SQSH_INODE_NO_XATTR: u32 = 4294967295;
impl SqshSuperblockCompressionId {
    pub const SQSH_COMPRESSION_GZIP: SqshSuperblockCompressionId = SqshSuperblockCompressionId(1);
}
impl SqshSuperblockCompressionId {
    pub const SQSH_COMPRESSION_LZMA: SqshSuperblockCompressionId = SqshSuperblockCompressionId(2);
}
impl SqshSuperblockCompressionId {
    pub const SQSH_COMPRESSION_LZO: SqshSuperblockCompressionId = SqshSuperblockCompressionId(3);
}
impl SqshSuperblockCompressionId {
    pub const SQSH_COMPRESSION_XZ: SqshSuperblockCompressionId = SqshSuperblockCompressionId(4);
}
impl SqshSuperblockCompressionId {
    pub const SQSH_COMPRESSION_LZ4: SqshSuperblockCompressionId = SqshSuperblockCompressionId(5);
}
impl SqshSuperblockCompressionId {
    pub const SQSH_COMPRESSION_ZSTD: SqshSuperblockCompressionId = SqshSuperblockCompressionId(6);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_UNCOMPRESSED_INODES: SqshSuperblockFlags = SqshSuperblockFlags(1);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_UNCOMPRESSED_DATA: SqshSuperblockFlags = SqshSuperblockFlags(2);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_CHECK: SqshSuperblockFlags = SqshSuperblockFlags(4);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_UNCOMPRESSED_FRAGMENTS: SqshSuperblockFlags = SqshSuperblockFlags(8);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_NO_FRAGMENTS: SqshSuperblockFlags = SqshSuperblockFlags(16);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_ALWAYS_FRAGMENTS: SqshSuperblockFlags = SqshSuperblockFlags(32);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_DUPLICATES: SqshSuperblockFlags = SqshSuperblockFlags(64);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_EXPORTABLE: SqshSuperblockFlags = SqshSuperblockFlags(128);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_UNCOMPRESSED_XATTRS: SqshSuperblockFlags = SqshSuperblockFlags(256);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_NO_XATTRS: SqshSuperblockFlags = SqshSuperblockFlags(512);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_COMPRESSOR_OPTIONS: SqshSuperblockFlags = SqshSuperblockFlags(1024);
}
impl SqshSuperblockFlags {
    pub const SQSH_SUPERBLOCK_UNCOMPRESSED_IDS: SqshSuperblockFlags = SqshSuperblockFlags(2048);
}
impl SqshGzipStrategies {
    pub const SQSH_GZIP_STRATEGY_NONE: SqshGzipStrategies = SqshGzipStrategies(0);
}
impl SqshGzipStrategies {
    pub const SQSH_GZIP_STRATEGY_DEFAULT: SqshGzipStrategies = SqshGzipStrategies(1);
}
impl SqshGzipStrategies {
    pub const SQSH_GZIP_STRATEGY_FILTERED: SqshGzipStrategies = SqshGzipStrategies(2);
}
impl SqshGzipStrategies {
    pub const SQSH_GZIP_STRATEGY_HUFFMAN_ONLY: SqshGzipStrategies = SqshGzipStrategies(4);
}
impl SqshGzipStrategies {
    pub const SQSH_GZIP_STRATEGY_RLE: SqshGzipStrategies = SqshGzipStrategies(8);
}
impl SqshGzipStrategies {
    pub const SQSH_GZIP_STRATEGY_FIXED: SqshGzipStrategies = SqshGzipStrategies(16);
}
impl SqshXzFilters {
    pub const SQSH_XZ_FILTER_NONE: SqshXzFilters = SqshXzFilters(0);
}
impl SqshXzFilters {
    pub const SQSH_XZ_FILTER_X86: SqshXzFilters = SqshXzFilters(1);
}
impl SqshXzFilters {
    pub const SQSH_XZ_FILTER_POWERPC: SqshXzFilters = SqshXzFilters(2);
}
impl SqshXzFilters {
    pub const SQSH_XZ_FILTER_IA64: SqshXzFilters = SqshXzFilters(4);
}
impl SqshXzFilters {
    pub const SQSH_XZ_FILTER_ARM: SqshXzFilters = SqshXzFilters(8);
}
impl SqshXzFilters {
    pub const SQSH_XZ_FILTER_ARMTHUMB: SqshXzFilters = SqshXzFilters(16);
}
impl SqshXzFilters {
    pub const SQSH_XZ_FILTER_SPARC: SqshXzFilters = SqshXzFilters(32);
}
impl SqshLz4Flags {
    pub const SQS_LZ4_FLAG_NONE: SqshLz4Flags = SqshLz4Flags(0);
}
impl SqshLz4Flags {
    pub const SQSH_LZ4_HIGH_COMPRESSION: SqshLz4Flags = SqshLz4Flags(1);
}
impl SqshLzoAlgorithm {
    pub const SQSH_LZO_ALGORITHM_LZO1X_1: SqshLzoAlgorithm = SqshLzoAlgorithm(0);
}
impl SqshLzoAlgorithm {
    pub const SQSH_LZO_ALGORITHM_LZO1X_1_11: SqshLzoAlgorithm = SqshLzoAlgorithm(1);
}
impl SqshLzoAlgorithm {
    pub const SQSH_LZO_ALGORITHM_LZO1X_1_12: SqshLzoAlgorithm = SqshLzoAlgorithm(2);
}
impl SqshLzoAlgorithm {
    pub const SQSH_LZO_ALGORITHM_LZO1X_1_15: SqshLzoAlgorithm = SqshLzoAlgorithm(3);
}
impl SqshLzoAlgorithm {
    pub const SQSH_LZO_ALGORITHM_LZO1X_999: SqshLzoAlgorithm = SqshLzoAlgorithm(4);
}
impl SqshFileType {
    pub const SQSH_FILE_TYPE_UNKNOWN: SqshFileType = SqshFileType(-1);
}
impl SqshFileType {
    pub const SQSH_FILE_TYPE_DIRECTORY: SqshFileType = SqshFileType(257);
}
impl SqshFileType {
    pub const SQSH_FILE_TYPE_FILE: SqshFileType = SqshFileType(258);
}
impl SqshFileType {
    pub const SQSH_FILE_TYPE_SYMLINK: SqshFileType = SqshFileType(259);
}
impl SqshFileType {
    pub const SQSH_FILE_TYPE_BLOCK: SqshFileType = SqshFileType(260);
}
impl SqshFileType {
    pub const SQSH_FILE_TYPE_CHAR: SqshFileType = SqshFileType(261);
}
impl SqshFileType {
    pub const SQSH_FILE_TYPE_FIFO: SqshFileType = SqshFileType(262);
}
impl SqshFileType {
    pub const SQSH_FILE_TYPE_SOCKET: SqshFileType = SqshFileType(263);
}
impl SqshError {
    pub const SQSH_SUCCESS: SqshError = SqshError(0);
}
impl SqshError {
    pub const SQSH_ERROR_SECTION_START: SqshError = SqshError(256);
}
impl SqshError {
    pub const SQSH_ERROR_SUPERBLOCK_TOO_SMALL: SqshError = SqshError(257);
}
impl SqshError {
    pub const SQSH_ERROR_WRONG_MAGIC: SqshError = SqshError(258);
}
impl SqshError {
    pub const SQSH_ERROR_BLOCKSIZE_MISMATCH: SqshError = SqshError(259);
}
impl SqshError {
    pub const SQSH_ERROR_SIZE_MISMATCH: SqshError = SqshError(260);
}
impl SqshError {
    pub const SQSH_ERROR_COMPRESSION_INIT: SqshError = SqshError(261);
}
impl SqshError {
    pub const SQSH_ERROR_COMPRESSION_UNSUPPORTED: SqshError = SqshError(262);
}
impl SqshError {
    pub const SQSH_ERROR_COMPRESSION_DECOMPRESS: SqshError = SqshError(263);
}
impl SqshError {
    pub const SQSH_ERROR_UNKNOWN_FILE_TYPE: SqshError = SqshError(264);
}
impl SqshError {
    pub const SQSH_ERROR_UNKOWN_FILE_TYPE: SqshError = SqshError(264);
}
impl SqshError {
    pub const SQSH_ERROR_NOT_A_DIRECTORY: SqshError = SqshError(265);
}
impl SqshError {
    pub const SQSH_ERROR_NOT_A_FILE: SqshError = SqshError(266);
}
impl SqshError {
    pub const SQSH_ERROR_MALLOC_FAILED: SqshError = SqshError(267);
}
impl SqshError {
    pub const SQSH_ERROR_MUTEX_INIT_FAILED: SqshError = SqshError(268);
}
impl SqshError {
    pub const SQSH_ERROR_MUTEX_LOCK_FAILED: SqshError = SqshError(269);
}
impl SqshError {
    pub const SQSH_ERROR_MUTEX_DESTROY_FAILED: SqshError = SqshError(270);
}
impl SqshError {
    pub const SQSH_ERROR_OUT_OF_BOUNDS: SqshError = SqshError(271);
}
impl SqshError {
    pub const SQSH_ERROR_INTEGER_OVERFLOW: SqshError = SqshError(272);
}
impl SqshError {
    pub const SQSH_ERROR_NO_SUCH_FILE: SqshError = SqshError(273);
}
impl SqshError {
    pub const SQSH_ERROR_NO_SUCH_XATTR: SqshError = SqshError(274);
}
impl SqshError {
    pub const SQSH_ERROR_NO_FRAGMENT_TABLE: SqshError = SqshError(275);
}
impl SqshError {
    pub const SQSH_ERROR_NO_EXTENDED_DIRECTORY: SqshError = SqshError(276);
}
impl SqshError {
    pub const SQSH_ERROR_NO_EXPORT_TABLE: SqshError = SqshError(277);
}
impl SqshError {
    pub const SQSH_ERROR_NO_XATTR_TABLE: SqshError = SqshError(278);
}
impl SqshError {
    pub const SQSH_ERROR_NO_COMPRESSION_OPTIONS: SqshError = SqshError(279);
}
impl SqshError {
    pub const SQSH_ERROR_MAPPER_INIT: SqshError = SqshError(280);
}
impl SqshError {
    pub const SQSH_ERROR_MAPPER_MAP: SqshError = SqshError(281);
}
impl SqshError {
    pub const SQSH_ERROR_CURL_INVALID_RANGE_HEADER: SqshError = SqshError(282);
}
impl SqshError {
    pub const SQSL_ERROR_ELEMENT_NOT_FOUND: SqshError = SqshError(283);
}
impl SqshError {
    pub const SQSH_ERROR_INVALID_ARGUMENT: SqshError = SqshError(284);
}
impl SqshError {
    pub const SQSH_ERROR_WALKER_CANNOT_GO_UP: SqshError = SqshError(285);
}
impl SqshError {
    pub const SQSH_ERROR_WALKER_CANNOT_GO_DOWN: SqshError = SqshError(286);
}
impl SqshError {
    pub const SQSH_ERROR_CORRUPTED_INODE: SqshError = SqshError(287);
}
impl SqshError {
    pub const SQSH_ERROR_CORRUPTED_DIRECTORY_ENTRY: SqshError = SqshError(288);
}
impl SqshError {
    pub const SQSH_ERROR_INTERNAL: SqshError = SqshError(289);
}
impl SqshError {
    pub const SQSH_ERROR_INODE_MAP_IS_INCONSISTENT: SqshError = SqshError(290);
}
impl SqshError {
    pub const SQSH_ERROR_XATTR_SIZE_MISMATCH: SqshError = SqshError(291);
}
impl SqshError {
    pub const SQSH_ERROR_UNSUPPORTED_VERSION: SqshError = SqshError(292);
}
impl SqshError {
    pub const SQSH_ERROR_TOO_MANY_SYMLINKS_FOLLOWED: SqshError = SqshError(293);
}
impl SqshXattrType {
    pub const SQSH_XATTR_USER: SqshXattrType = SqshXattrType(0);
}
impl SqshXattrType {
    pub const SQSH_XATTR_TRUSTED: SqshXattrType = SqshXattrType(1);
}
impl SqshXattrType {
    pub const SQSH_XATTR_SECURITY: SqshXattrType = SqshXattrType(2);
}
extern "C" {
    pub fn sqsh_trailing_size(context: *const SqshTrailingContext) -> usize;
}
extern "C" {
    pub fn sqsh_trailing_data(context: *const SqshTrailingContext) -> *const u8;
}
extern "C" {
    #[must_use]
    pub fn sqsh_inode_map_get(map: *const SqshInodeMap, inode_number: u64) -> u64;
}
extern "C" {
    #[must_use]
    pub fn sqsh_inode_map_set(
        map: *mut SqshInodeMap,
        inode_number: u64,
        inode_ref: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_superblock_compression_id(
        context: *const SqshSuperblock,
    ) -> SqshSuperblockCompressionId;
}
extern "C" {
    pub fn sqsh_superblock_directory_table_start(context: *const SqshSuperblock) -> u64;
}
extern "C" {
    pub fn sqsh_superblock_fragment_table_start(context: *const SqshSuperblock) -> u64;
}
extern "C" {
    pub fn sqsh_superblock_inode_count(context: *const SqshSuperblock) -> u32;
}
extern "C" {
    pub fn sqsh_superblock_version_major(superblock: *const SqshSuperblock) -> u16;
}
extern "C" {
    pub fn sqsh_superblock_version_minor(superblock: *const SqshSuperblock) -> u16;
}
extern "C" {
    pub fn sqsh_superblock_inode_table_start(context: *const SqshSuperblock) -> u64;
}
extern "C" {
    pub fn sqsh_superblock_id_table_start(context: *const SqshSuperblock) -> u64;
}
extern "C" {
    pub fn sqsh_superblock_id_count(context: *const SqshSuperblock) -> u16;
}
extern "C" {
    pub fn sqsh_superblock_export_table_start(context: *const SqshSuperblock) -> u64;
}
extern "C" {
    pub fn sqsh_superblock_xattr_id_table_start(context: *const SqshSuperblock) -> u64;
}
extern "C" {
    pub fn sqsh_superblock_inode_root_ref(context: *const SqshSuperblock) -> u64;
}
extern "C" {
    pub fn sqsh_superblock_has_fragments(context: *const SqshSuperblock) -> bool;
}
extern "C" {
    pub fn sqsh_superblock_has_export_table(context: *const SqshSuperblock) -> bool;
}
extern "C" {
    pub fn sqsh_superblock_has_xattr_table(context: *const SqshSuperblock) -> bool;
}
extern "C" {
    pub fn sqsh_superblock_has_compression_options(context: *const SqshSuperblock) -> bool;
}
extern "C" {
    pub fn sqsh_superblock_block_size(context: *const SqshSuperblock) -> u32;
}
extern "C" {
    pub fn sqsh_superblock_modification_time(context: *const SqshSuperblock) -> u32;
}
extern "C" {
    pub fn sqsh_superblock_fragment_entry_count(context: *const SqshSuperblock) -> u32;
}
extern "C" {
    pub fn sqsh_superblock_bytes_used(context: *const SqshSuperblock) -> u64;
}
extern "C" {
    #[must_use]
    pub fn sqsh_archive_open(
        source: *const ::std::os::raw::c_void,
        config: *const SqshConfig,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut SqshArchive;
}
extern "C" {
    pub fn sqsh_archive_config(archive: *const SqshArchive) -> *const SqshConfig;
}
extern "C" {
    pub fn sqsh_archive_superblock(archive: *const SqshArchive) -> *const SqshSuperblock;
}
extern "C" {
    pub fn sqsh_archive_map_manager(archive: *mut SqshArchive) -> *mut SqshMapManager;
}
extern "C" {
    #[must_use]
    pub fn sqsh_archive_id_table(
        archive: *mut SqshArchive,
        id_table: *mut *mut SqshIdTable,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_archive_inode_map(
        archive: *mut SqshArchive,
        inode_map: *mut *mut SqshInodeMap,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_archive_export_table(
        archive: *mut SqshArchive,
        export_table: *mut *mut SqshExportTable,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_archive_fragment_table(
        archive: *mut SqshArchive,
        fragment_table: *mut *mut SqshFragmentTable,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_archive_xattr_table(
        archive: *mut SqshArchive,
        xattr_table: *mut *mut SqshXattrTable,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_archive_close(archive: *mut SqshArchive) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_compression_options_new(
        sqsh: *mut SqshArchive,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut SqshCompressionOptions;
}
extern "C" {
    pub fn sqsh_compression_options_gzip_compression_level(
        context: *const SqshCompressionOptions,
    ) -> u32;
}
extern "C" {
    pub fn sqsh_compression_options_gzip_window_size(context: *const SqshCompressionOptions)
        -> u16;
}
extern "C" {
    pub fn sqsh_compression_options_gzip_strategies(
        context: *const SqshCompressionOptions,
    ) -> SqshGzipStrategies;
}
extern "C" {
    pub fn sqsh_compression_options_xz_dictionary_size(
        context: *const SqshCompressionOptions,
    ) -> u32;
}
extern "C" {
    pub fn sqsh_compression_options_xz_filters(
        context: *const SqshCompressionOptions,
    ) -> SqshXzFilters;
}
extern "C" {
    pub fn sqsh_compression_options_lz4_version(context: *const SqshCompressionOptions) -> u32;
}
extern "C" {
    pub fn sqsh_compression_options_lz4_flags(context: *const SqshCompressionOptions) -> u32;
}
extern "C" {
    pub fn sqsh_compression_options_zstd_compression_level(
        context: *const SqshCompressionOptions,
    ) -> u32;
}
extern "C" {
    pub fn sqsh_compression_options_lzo_algorithm(
        context: *const SqshCompressionOptions,
    ) -> SqshLzoAlgorithm;
}
extern "C" {
    pub fn sqsh_compression_options_lzo_compression_level(
        context: *const SqshCompressionOptions,
    ) -> u32;
}
extern "C" {
    pub fn sqsh_compression_options_size(context: *const SqshCompressionOptions) -> usize;
}
extern "C" {
    pub fn sqsh_compression_options_free(
        context: *mut SqshCompressionOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_file_reader_new(
        file: *const SqshFile,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut SqshFileReader;
}
extern "C" {
    pub fn sqsh_file_reader_advance(
        reader: *mut SqshFileReader,
        offset: sqsh_index_t,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_file_reader_data(reader: *const SqshFileReader) -> *const u8;
}
extern "C" {
    pub fn sqsh_file_reader_size(reader: *const SqshFileReader) -> usize;
}
extern "C" {
    pub fn sqsh_file_reader_free(reader: *mut SqshFileReader) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_file_iterator_new(
        file: *const SqshFile,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut SqshFileIterator;
}
extern "C" {
    #[must_use]
    pub fn sqsh_file_iterator_next(
        iterator: *mut SqshFileIterator,
        desired_size: usize,
        err: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[must_use]
    pub fn sqsh_file_iterator_skip(
        iterator: *mut SqshFileIterator,
        offset: *mut sqsh_index_t,
        desired_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_file_iterator_data(iterator: *const SqshFileIterator) -> *const u8;
}
extern "C" {
    #[must_use]
    pub fn sqsh_file_iterator_block_size(iterator: *const SqshFileIterator) -> usize;
}
extern "C" {
    #[must_use]
    pub fn sqsh_file_iterator_size(iterator: *const SqshFileIterator) -> usize;
}
extern "C" {
    pub fn sqsh_file_iterator_free(iterator: *mut SqshFileIterator) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_open(
        archive: *mut SqshArchive,
        path: *const ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut SqshFile;
}
extern "C" {
    #[must_use]
    pub fn sqsh_open_by_ref(
        archive: *mut SqshArchive,
        inode_ref: u64,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut SqshFile;
}
extern "C" {
    pub fn sqsh_file_is_extended(context: *const SqshFile) -> bool;
}
extern "C" {
    pub fn sqsh_file_hard_link_count(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_size(context: *const SqshFile) -> u64;
}
extern "C" {
    pub fn sqsh_file_permission(context: *const SqshFile) -> u16;
}
extern "C" {
    pub fn sqsh_file_inode(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_modified_time(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_blocks_start(context: *const SqshFile) -> u64;
}
extern "C" {
    pub fn sqsh_file_block_count(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_block_size(context: *const SqshFile, index: u32) -> u32;
}
extern "C" {
    pub fn sqsh_file_block_is_compressed(context: *const SqshFile, index: u32) -> bool;
}
extern "C" {
    pub fn sqsh_file_fragment_block_index(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_fragment_block_offset(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_directory_block_start(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_directory_block_offset(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_directory_parent_inode(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_has_fragment(context: *const SqshFile) -> bool;
}
extern "C" {
    pub fn sqsh_file_type(context: *const SqshFile) -> SqshFileType;
}
extern "C" {
    pub fn sqsh_file_symlink(context: *const SqshFile) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[must_use]
    pub fn sqsh_file_symlink_dup(context: *const SqshFile) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sqsh_file_symlink_size(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_device_id(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_uid(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_gid(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_file_inode_ref(context: *const SqshFile) -> u64;
}
extern "C" {
    pub fn sqsh_file_xattr_index(context: *const SqshFile) -> u32;
}
extern "C" {
    pub fn sqsh_close(file: *mut SqshFile) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_directory_iterator_new(
        file: *mut SqshFile,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut SqshDirectoryIterator;
}
extern "C" {
    #[must_use]
    pub fn sqsh_directory_iterator_next(
        iterator: *mut SqshDirectoryIterator,
        err: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[must_use]
    pub fn sqsh_directory_iterator_lookup(
        iterator: *mut SqshDirectoryIterator,
        name: *const ::std::os::raw::c_char,
        name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_directory_iterator_name_size(iterator: *const SqshDirectoryIterator) -> u16;
}
extern "C" {
    pub fn sqsh_directory_iterator_inode_number(iterator: *const SqshDirectoryIterator) -> u64;
}
extern "C" {
    pub fn sqsh_directory_iterator_inode_ref(iterator: *const SqshDirectoryIterator) -> u64;
}
extern "C" {
    pub fn sqsh_directory_iterator_file_type(
        iterator: *const SqshDirectoryIterator,
    ) -> SqshFileType;
}
extern "C" {
    #[must_use]
    pub fn sqsh_directory_iterator_open_file(
        iterator: *const SqshDirectoryIterator,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut SqshFile;
}
extern "C" {
    pub fn sqsh_directory_iterator_name(
        iterator: *const SqshDirectoryIterator,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[must_use]
    pub fn sqsh_directory_iterator_name_dup(
        iterator: *const SqshDirectoryIterator,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sqsh_directory_iterator_free(
        iterator: *mut SqshDirectoryIterator,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_easy_file_exists(
        archive: *mut SqshArchive,
        path: *const ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn sqsh_easy_file_content(
        archive: *mut SqshArchive,
        path: *const ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn sqsh_easy_file_size(
        archive: *mut SqshArchive,
        path: *const ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn sqsh_easy_file_permission(
        archive: *mut SqshArchive,
        path: *const ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_int,
    ) -> mode_t;
}
extern "C" {
    pub fn sqsh_easy_file_mtime(
        archive: *mut SqshArchive,
        path: *const ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_int,
    ) -> time_t;
}
extern "C" {
    pub fn sqsh_easy_directory_list(
        archive: *mut SqshArchive,
        path: *const ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sqsh_easy_xattr_keys(
        archive: *mut SqshArchive,
        path: *const ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sqsh_easy_xattr_get(
        archive: *mut SqshArchive,
        path: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_char,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sqsh_perror(error_code: ::std::os::raw::c_int, msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[must_use]
    pub fn sqsh_error_str(error_code: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub static sqsh_mapper_impl_curl: *const SqshMemoryMapperImpl;
}
extern "C" {
    pub static sqsh_mapper_impl_mmap: *const SqshMemoryMapperImpl;
}
extern "C" {
    pub static sqsh_mapper_impl_static: *const SqshMemoryMapperImpl;
}
extern "C" {
    pub fn sqsh_file_to_stream(file: *const SqshFile, stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_table_get(
        table: *const SqshTable,
        index: sqsh_index_t,
        target: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_id_table_get(
        table: *const SqshIdTable,
        index: sqsh_index_t,
        id: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_export_table_resolve_inode(
        table: *const SqshExportTable,
        inode: u64,
        inode_ref: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_tree_walker_new(
        archive: *mut SqshArchive,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut SqshTreeWalker;
}
extern "C" {
    #[must_use]
    pub fn sqsh_tree_walker_up(walker: *mut SqshTreeWalker) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_tree_walker_next(walker: *mut SqshTreeWalker) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_tree_walker_type(walker: *const SqshTreeWalker) -> SqshFileType;
}
extern "C" {
    pub fn sqsh_tree_walker_name(walker: *const SqshTreeWalker) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sqsh_tree_walker_name_size(walker: *const SqshTreeWalker) -> u16;
}
extern "C" {
    #[must_use]
    pub fn sqsh_tree_walker_name_dup(walker: *const SqshTreeWalker) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[must_use]
    pub fn sqsh_tree_walker_revert(walker: *mut SqshTreeWalker) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_tree_walker_lookup(
        walker: *mut SqshTreeWalker,
        name: *const ::std::os::raw::c_char,
        name_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_tree_walker_down(walker: *mut SqshTreeWalker) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_tree_walker_to_root(walker: *mut SqshTreeWalker) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_tree_walker_open_file(
        walker: *const SqshTreeWalker,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut SqshFile;
}
extern "C" {
    #[must_use]
    pub fn sqsh_tree_walker_resolve(
        walker: *mut SqshTreeWalker,
        path: *const ::std::os::raw::c_char,
        follow_symlinks: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sqsh_tree_walker_free(reader: *mut SqshTreeWalker) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_xattr_iterator_new(
        file: *const SqshFile,
        err: *mut ::std::os::raw::c_int,
    ) -> *mut SqshXattrIterator;
}
extern "C" {
    #[must_use]
    pub fn sqsh_xattr_iterator_next(
        iterator: *mut SqshXattrIterator,
        err: *mut ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn sqsh_xattr_iterator_type(iterator: *const SqshXattrIterator) -> u16;
}
extern "C" {
    pub fn sqsh_xattr_iterator_is_indirect(iterator: *const SqshXattrIterator) -> bool;
}
extern "C" {
    pub fn sqsh_xattr_iterator_prefix(
        iterator: *const SqshXattrIterator,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sqsh_xattr_iterator_prefix_size(iterator: *const SqshXattrIterator) -> u16;
}
extern "C" {
    pub fn sqsh_xattr_iterator_name(
        iterator: *const SqshXattrIterator,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sqsh_xattr_iterator_name_size(iterator: *const SqshXattrIterator) -> u16;
}
extern "C" {
    #[must_use]
    pub fn sqsh_xattr_iterator_lookup(
        iterator: *mut SqshXattrIterator,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_xattr_iterator_fullname_cmp(
        iterator: *const SqshXattrIterator,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[must_use]
    pub fn sqsh_xattr_iterator_fullname_dup(
        iterator: *const SqshXattrIterator,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[must_use]
    pub fn sqsh_xattr_iterator_value_dup(
        iterator: *const SqshXattrIterator,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sqsh_xattr_iterator_value(
        iterator: *const SqshXattrIterator,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sqsh_xattr_iterator_value_size(iterator: *const SqshXattrIterator) -> u16;
}
extern "C" {
    pub fn sqsh_xattr_iterator_free(iterator: *mut SqshXattrIterator) -> ::std::os::raw::c_int;
}
